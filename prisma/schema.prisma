// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id String @id @default(uuid())

  firstName       String  @map("first_name")
  lastName        String  @map("last_name")
  phoneNumber     String  @map("phone_number")
  email           String  @unique
  country         String
  cityAndState    String  @map("city_state")
  areaOfInterest  String  @map("area_of_interest")
  methodOfContact String  @map("method_of_contact")
  prayerRequest   String? @map("prayer_request")
  replied         Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("members")
}

model Article {
  id String @id @default(uuid())

  title         String
  content       String
  imageUrl      String    @map("image_url")
  status        Status    @default(unpublish)
  language      String
  author        String
  datePublished DateTime? @map("date_published")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("articles")
}

model Book {
  id String @id @default(uuid())

  title       String
  description String
  coverImage  String  @default("cover_image")
  price       Float   @default(0)
  rating      Int     @default(0)
  status      Status  @default(unpublish)
  language    String?
  bookType    String? @default("book_type")
  pages       Int
  dimension   String?
  authorName  String  @map("author_name")
  authorBio   String? @map("author_bio")
  authorImage String? @map("author_image")
  pdfUrl      String? @map("pdf_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("books")
  payments Payment[]
}

model PrayerRequest {
  id String @id @default(uuid())

  firstName       String  @map("first_name")
  lastName        String  @map("last_name")
  phoneNumber     String  @map("phone_number")
  email           String
  country         String
  cityAndState    String  @map("city_state")
  methodOfContact String  @map("method_of_contact")
  prayerRequest   String  @map("prayer_request")
  replied         Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("prayer_requests")
}

model Donation {
  id String @id @default(uuid())

  amount        Float
  donationType  String  @map("donation_type")
  firstName     String  @map("first_name")
  lastName      String  @map("last_name")
  phoneNumber   String  @map("phone_number")
  email         String
  country       String
  cityAndState         String
  paymentStatus PaymentStatus  @default(initiated) @map("payment_status")
  trxfReference String? @map("trxf_reference")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("donations")
  payments Payment[]
}

model EventForm {
  id String @id @default(uuid())

  firstName       String @map("first_name")
  lastName        String @map("last_name")
  phoneNumber     String @map("phone_number")
  email           String
  country         String
  cityAndState    String @map("city_state")
  methodOfContact String @map("method_of_contact")

  eventId String @map("event_id")
  event   Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("event_form")
}

model Event {
  id String @id @default(uuid())

  title       String
  description String?
  date        DateTime
  time        String
  location    String
  meetingLink String   @map("meeting_link")
  eventImage  String?  @map("event_image")
  status      Status   @default(unpublish)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event_registrations EventForm[]

  @@map("events")
}

model Contact {
  id String @id @default(uuid())

  firstName       String  @map("first_name")
  lastName        String  @map("last_name")
  phoneNumber     String  @map("phone_number")
  email           String
  country         String
  cityAndState    String  @map("city_state")
  methodOfContact String  @map("method_of_contact")
  message         String
  replied         Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

model Sermon {
  id String @id @default(uuid())

  title       String
  description String
  preacher    String
  publishedDate        DateTime?
  link        String
  thumbnail   String
  status  Status  @default(unpublish)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sermons")
}

model Payment {
  id String @id @default(uuid())

  metadata Json
  amount       Float
  paymentType String @map("payment_type")
  paymentDate DateTime? @map("payment_date")
  reference String @unique
  method String?
  paymentStatus PaymentStatus @default(initiated) @map("payment_status")

  bookId String? @map("book_id")
  book Book? @relation(fields: [bookId], references: [id], onDelete: NoAction)

  donationId String? @map("donation_id")
  donation Donation? @relation(fields: [donationId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("payments")
}

enum Status {
  publish
  unpublish
}

enum PaymentStatus {
  initiated
  failed
  success
}

model Admin {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  role     String @default("admin")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}
